{"name":"Callviz","tagline":"Python call graph visualization for recursive functions. ","body":"callviz\r\n=======\r\n\r\n* Python module to visualize a recursion as a tree with arguments and return values at each node. \r\n* Provides a decorator to instrument target functions (as opposed to trace or debugger based approaches)  \r\n* Uses pygraphviz to render the graph. \r\n\r\n##usage\r\n\r\n1. Use the @viz decorator to instrument the recursive function.\r\n2. Render the recursion with \r\n\r\n> callgraph.render(\"outfile.png\") \r\n\r\nThe output file type is derived from the file name. Supported types include .dot (graphviz dot file), .png (png image), .svg (vector graphic)\r\n\r\n##example\r\n\r\n```python\r\nfrom callviz import callgraph, viz\r\n\r\n@viz\r\ndef quicksort(items):\r\n    if len(items) <= 1: \r\n        return items\r\n    else:\r\n        pivot = items[0]\r\n        lesser = quicksort([x for x in items[1:] if x < pivot])\r\n        greater = quicksort([x for x in items[1:] if x >= pivot])\r\n        return lesser + [pivot] + greater\r\n\r\nprint quicksort( list(\"helloworld\") )\r\ncallgraph.render(\"sort.png\")\r\n```\r\n\r\n## output \r\n![quicksort callviz output](http://s12.postimg.org/5f3eonikd/sort.png)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}